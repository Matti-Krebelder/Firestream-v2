<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{ panel_name }}</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        :root {
            --primary: #5d4dff;
            --primary-dark: #4a3dd9;
            --primary-light: #7a6fff;
            --dark: #0f0f1e;
            --darker: #080814;
            --light: #f5f5f5;
            --gray: #808080;
            --gray-dark: #2a2a2a;
            --transition: all 0.3s ease;
            --glow: 0 0 15px rgba(93, 77, 255, 0.7);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        body {
            background: linear-gradient(135deg, var(--darker) 0%, #1a1a40 100%);
            color: var(--light);
            overflow-x: hidden;
            min-height: 100vh;
        }

        header {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            z-index: 100;
            padding: 15px 30px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            background: rgba(15, 15, 30, 0.8);
            backdrop-filter: blur(10px);
            transition: var(--transition);
        }

        .logo-section {
            display: flex;
            align-items: center;
            gap: 20px;
        }

        .logo {
            width: 40px;
            height: 40px;
            background-color: var(--primary);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: bold;
            font-size: 18px;
            box-shadow: var(--glow);
        }

        .nav-links {
            display: flex;
            gap: 25px;
            align-items: center;
        }

        .nav-links a {
            color: var(--light);
            text-decoration: none;
            font-size: 0.9rem;
            transition: var(--transition);
            display: flex;
            align-items: center;
            gap: 8px;
            padding: 8px 12px;
            border-radius: 20px;
        }

        .nav-links a:hover {
            background-color: rgba(255, 255, 255, 0.1);
            color: var(--primary-light);
        }

        .nav-links a.active {
            background-color: rgba(93, 77, 255, 0.2);
            color: var(--primary-light);
        }

        .user-menu {
            display: flex;
            align-items: center;
            gap: 20px;
        }

        .search-box {
            position: relative;
        }

        .search-box input {
            background-color: rgba(255, 255, 255, 0.1);
            border: none;
            color: white;
            padding: 8px 15px 8px 35px;
            border-radius: 20px;
            outline: none;
            width: 200px;
            transition: var(--transition);
        }

        .search-box input:focus {
            background-color: rgba(255, 255, 255, 0.15);
            width: 250px;
            box-shadow: 0 0 10px rgba(93, 77, 255, 0.3);
        }

        .search-box i {
            position: absolute;
            left: 12px;
            top: 50%;
            transform: translateY(-50%);
            color: var(--light);
        }

        .user-profile {
            width: 35px;
            height: 35px;
            border-radius: 50%;
            background-color: var(--primary);
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            overflow: hidden;
            transition: var(--transition);
            box-shadow: 0 0 10px rgba(93, 77, 255, 0.5);
        }

        .user-profile:hover {
            transform: scale(1.1);
            box-shadow: 0 0 15px rgba(93, 77, 255, 0.8);
        }

        .hero {
            position: relative;
            height: 80vh;
            background-size: cover;
            background-position: center;
            display: flex;
            align-items: center;
            padding: 0 50px;
            margin-top: 70px;
            margin-bottom: 30px;
            border-radius: 20px;
            overflow: hidden;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
            max-width: 95%;
            margin-left: auto;
            margin-right: auto;
        }

        .hero::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, rgba(15, 15, 30, 0.9) 0%, rgba(15, 15, 30, 0.7) 50%, rgba(15, 15, 30, 0.4) 100%);
        }

        .hero-content {
            position: relative;
            z-index: 1;
            max-width: 600px;
            padding: 30px;
        }

        .hero-meta {
            display: flex;
            align-items: center;
            gap: 15px;
            margin-bottom: 15px;
            font-size: 0.9rem;
        }

        .hero-year, .hero-duration, .hero-category {
            display: flex;
            align-items: center;
            gap: 5px;
        }

        .hero-title {
            font-size: 3.5rem;
            margin-bottom: 20px;
            text-shadow: 2px 2px 5px rgba(0, 0, 0, 0.5);
            background: linear-gradient(to right, #fff, #a9a9ff);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            font-weight: 800;
        }

        .hero-description {
            font-size: 1.1rem;
            margin-bottom: 30px;
            line-height: 1.6;
            text-shadow: 1px 1px 3px rgba(0, 0, 0, 0.5);
            opacity: 0.9;
        }

        .hero-cast {
            margin-bottom: 25px;
            font-size: 0.9rem;
            color: #ccc;
        }

        .hero-buttons {
            display: flex;
            gap: 15px;
        }

        .btn {
            padding: 12px 25px;
            border-radius: 30px;
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            transition: var(--transition);
            display: flex;
            align-items: center;
            gap: 10px;
            position: relative;
            overflow: hidden;
            border: none;
        }

        .btn::after {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
            transition: 0.5s;
        }

        .btn:hover::after {
            left: 100%;
        }

        .btn-primary {
            background-color: var(--primary);
            color: white;
            box-shadow: 0 0 15px rgba(93, 77, 255, 0.5);
        }

        .btn-primary:hover {
            background-color: var(--primary-dark);
            box-shadow: 0 0 20px rgba(93, 77, 255, 0.8);
            transform: translateY(-2px);
        }

        .btn-secondary {
            background-color: rgba(255, 255, 255, 0.15);
            color: white;
            backdrop-filter: blur(5px);
        }

        .btn-secondary:hover {
            background-color: rgba(255, 255, 255, 0.25);
            transform: translateY(-2px);
        }

        .content-section {
            padding: 0 50px;
            margin-bottom: 40px;
        }

        .section-title {
            font-size: 1.5rem;
            margin-bottom: 20px;
            display: flex;
            align-items: center;
            gap: 10px;
            color: #fff;
            font-weight: 600;
        }

        .content-row {
            display: flex;
            gap: 15px;
            overflow-x: auto;
            padding: 20px 0;
            scroll-behavior: smooth;
        }

        .content-row::-webkit-scrollbar {
            height: 8px;
        }

        .content-row::-webkit-scrollbar-track {
            background: rgba(255, 255, 255, 0.05);
            border-radius: 10px;
        }

        .content-row::-webkit-scrollbar-thumb {
            background: var(--primary);
            border-radius: 10px;
        }

        .content-row::-webkit-scrollbar-thumb:hover {
            background: var(--primary-dark);
        }

        .content-card {
            min-width: 200px;
            width: 200px;
            height: 300px;
            border-radius: 12px;
            overflow: hidden;
            position: relative;
            transition: var(--transition);
            cursor: pointer;
            flex-shrink: 0;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
        }

        .content-card:hover {
            transform: scale(1.05) translateY(-5px);
            z-index: 10;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.5);
        }

        .content-card.active {
            border: 2px solid var(--primary);
            box-shadow: 0 0 20px rgba(93, 77, 255, 0.7);
        }

        .content-card img {
            width: 100%;
            height: 100%;
            object-fit: cover;
            transition: var(--transition);
        }

        .content-card:hover img {
            opacity: 0.7;
            transform: scale(1.1);
        }

        .card-overlay {
            position: absolute;
            bottom: 0;
            left: 0;
            width: 100%;
            padding: 20px;
            background: linear-gradient(to top, rgba(0, 0, 0, 0.9) 0%, rgba(0, 0, 0, 0) 100%);
            opacity: 0;
            transition: var(--transition);
            transform: translateY(20px);
        }

        .content-card:hover .card-overlay {
            opacity: 1;
            transform: translateY(0);
        }

        .card-title {
            font-size: 1.1rem;
            margin-bottom: 5px;
            font-weight: 600;
        }

        .card-meta {
            display: flex;
            align-items: center;
            gap: 10px;
            font-size: 0.8rem;
            color: var(--gray);
            margin-bottom: 10px;
        }

        .card-rating {
            color: gold;
        }

        .card-genres {
            display: flex;
            flex-wrap: wrap;
            gap: 5px;
            margin-top: 10px;
        }

        .genre-tag {
            background-color: var(--primary);
            padding: 3px 8px;
            border-radius: 20px;
            font-size: 0.7rem;
            transition: var(--transition);
        }

        .genre-tag:hover {
            transform: translateY(-2px);
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
        }

        .modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.8);
            z-index: 1000;
            display: flex;
            justify-content: center;
            align-items: center;
            opacity: 0;
            pointer-events: none;
            transition: var(--transition);
            backdrop-filter: blur(5px);
        }

        .modal.active {
            opacity: 1;
            pointer-events: all;
        }

        .modal-content {
            background-color: var(--dark);
            width: 80%;
            max-width: 1000px;
            border-radius: 20px;
            overflow: hidden;
            position: relative;
            transform: scale(0.9);
            transition: var(--transition);
            box-shadow: 0 0 30px rgba(0, 0, 0, 0.8);
            border: 1px solid rgba(93, 77, 255, 0.3);
        }

        .modal.active .modal-content {
            transform: scale(1);
        }

        .modal-close {
            position: absolute;
            top: 20px;
            right: 20px;
            background-color: rgba(0, 0, 0, 0.5);
            border: none;
            color: white;
            width: 40px;
            height: 40px;
            border-radius: 50%;
            font-size: 1.2rem;
            cursor: pointer;
            z-index: 10;
            transition: var(--transition);
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .modal-close:hover {
            background-color: var(--primary);
            transform: rotate(90deg);
        }

        .modal-poster {
            width: 100%;
            height: 400px;
            object-fit: cover;
            filter: brightness(0.8);
            transition: var(--transition);
        }

        .modal-content:hover .modal-poster {
            filter: brightness(1);
        }

        .modal-details {
            padding: 30px;
            position: relative;
        }

        .modal-title {
            font-size: 2rem;
            margin-bottom: 10px;
            position: relative;
            display: inline-block;
            font-weight: 700;
        }

        .modal-title::after {
            content: '';
            position: absolute;
            bottom: -5px;
            left: 0;
            width: 50px;
            height: 3px;
            background-color: var(--primary);
        }

        .modal-meta {
            display: flex;
            gap: 20px;
            margin-bottom: 20px;
            color: var(--gray);
        }

        .modal-rating {
            color: gold;
        }

        .modal-description {
            line-height: 1.6;
            margin-bottom: 20px;
        }

        .modal-genres {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
            flex-wrap: wrap;
        }

        .modal-buttons {
            display: flex;
            gap: 15px;
        }

        /* Series specific styles */
        .series-content {
            margin-top: 30px;
            border-top: 1px solid rgba(255, 255, 255, 0.1);
            padding-top: 20px;
        }

        .season-selector {
            position: relative;
            margin-bottom: 20px;
            width: 250px;
        }

        .season-dropdown {
            background-color: rgba(255, 255, 255, 0.1);
            color: var(--light);
            padding: 12px 15px;
            border-radius: 10px;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: space-between;
            transition: var(--transition);
        }

        .season-dropdown:hover {
            background-color: rgba(255, 255, 255, 0.15);
        }

        .season-dropdown i {
            margin-left: 10px;
            transition: var(--transition);
        }

        .season-dropdown.active i {
            transform: rotate(180deg);
        }

        .season-options {
            position: absolute;
            top: 100%;
            left: 0;
            width: 100%;
            background-color: var(--dark);
            border-radius: 10px;
            z-index: 10;
            max-height: 0;
            overflow: hidden;
            transition: max-height 0.3s ease;
            margin-top: 5px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
        }

        .season-selector.active .season-options {
            max-height: 300px;
            overflow-y: auto;
        }

        .season-option {
            padding: 12px 15px;
            cursor: pointer;
            transition: var(--transition);
        }

        .season-option:hover, .season-option.selected {
            background-color: var(--primary-dark);
        }

        /* Episode list */
        .episodes-container {
            margin-top: 20px;
            max-height: 400px;
            overflow-y: auto;
            padding-right: 10px;
        }

        .episodes-container::-webkit-scrollbar {
            width: 8px;
        }

        .episodes-container::-webkit-scrollbar-track {
            background: rgba(255, 255, 255, 0.05);
            border-radius: 10px;
        }

        .episodes-container::-webkit-scrollbar-thumb {
            background: var(--primary);
            border-radius: 10px;
        }

        .episode-item {
            display: flex;
            padding: 15px;
            background-color: rgba(255, 255, 255, 0.05);
            border-radius: 10px;
            margin-bottom: 10px;
            cursor: pointer;
            transition: var(--transition);
            border-left: 3px solid transparent;
        }

        .episode-item:hover {
            background-color: rgba(255, 255, 255, 0.1);
            border-left-color: var(--primary);
            transform: translateX(5px);
        }

        .episode-number {
            font-size: 1.5rem;
            font-weight: bold;
            color: var(--primary);
            margin-right: 15px;
            min-width: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .episode-details {
            flex: 1;
        }

        .episode-title {
            font-size: 1.1rem;
            margin-bottom: 5px;
            font-weight: bold;
        }

        .episode-meta {
            font-size: 0.9rem;
            color: var(--gray);
        }

        .series-badge {
            position: absolute;
            top: 10px;
            right: 10px;
            background-color: var(--primary);
            color: white;
            padding: 5px 10px;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: bold;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.3);
            z-index: 5;
        }

        /* Trailer modal */
        .trailer-modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.9);
            z-index: 1001;
            display: flex;
            justify-content: center;
            align-items: center;
            opacity: 0;
            pointer-events: none;
            transition: var(--transition);
        }
        
        .trailer-modal.active {
            opacity: 1;
            pointer-events: all;
        }
        
        .trailer-modal-content {
            width: 80%;
            max-width: 900px;
            position: relative;
        }
        
        .trailer-close {
            position: absolute;
            top: -40px;
            right: 0;
            color: white;
            font-size: 1.5rem;
            cursor: pointer;
            transition: var(--transition);
        }
        
        .trailer-close:hover {
            color: var(--primary);
        }
        
        .trailer-iframe {
            width: 100%;
            height: 500px;
            border: none;
            border-radius: 8px;
        }

        /* Loading Animation */
        .loader {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            width: 100%;
            position: fixed;
            top: 0;
            left: 0;
            background: linear-gradient(135deg, var(--darker) 0%, #1a1a40 100%);
            z-index: 10000;
            animation: fadeOut 1s forwards 1s;
        }

        .loader-content {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 20px;
        }

        .loader-logo {
            width: 80px;
            height: 80px;
            background-color: var(--primary);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: bold;
            font-size: 30px;
            box-shadow: var(--glow);
            animation: pulse 1.5s infinite;
        }

        .loader-bar {
            width: 200px;
            height: 4px;
            background-color: rgba(255, 255, 255, 0.1);
            border-radius: 2px;
            overflow: hidden;
            position: relative;
        }

        .loader-progress {
            position: absolute;
            top: 0;
            left: 0;
            height: 100%;
            width: 0%;
            background-color: var(--primary);
            animation: loading 1s forwards;
        }

        @keyframes loading {
            to { width: 100%; }
        }

        @keyframes pulse {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.1); }
        }

        @keyframes fadeOut {
            to {
                opacity: 0;
                pointer-events: none;
            }
        }

        @media (max-width: 768px) {
            header {
                padding: 15px 20px;
            }
            
            .hero {
                padding: 0 20px;
                height: 70vh;
            }
            
            .hero-title {
                font-size: 2.5rem;
            }
            
            .hero-description {
                font-size: 1rem;
            }
            
            .content-section {
                padding: 0 20px;
            }
            
            .content-card {
                min-width: 150px;
                width: 150px;
                height: 225px;
            }
            
            .modal-content {
                width: 95%;
            }

            .modal-poster {
                height: 250px;
            }

            .nav-links a span {
                display: none;
            }
            
            .trailer-iframe {
                height: 300px;
            }
        }

        @media (max-width: 480px) {
            .hero-title {
                font-size: 2rem;
            }
            
            .hero-buttons {
                flex-direction: column;
            }
            
            .nav-links {
                gap: 10px;
            }
        }
    </style>
</head>
<body>
    <!-- Loading Screen -->
    <div class="loader">
        <div class="loader-content">
            <div class="loader-logo">P</div>
            <div class="loader-bar">
                <div class="loader-progress"></div>
            </div>
        </div>
    </div>

    <!-- Header -->
    <header>
        <div class="logo-section">
            <div class="logo">P</div>
        </div>
        <nav class="nav-links">
            <a href="#" class="active"><i class="fas fa-home"></i> <span>Home</span></a>
            <a href="#"><i class="fas fa-layer-group"></i> <span>Libraries</span></a>
            <a href="#"><i class="fas fa-tv"></i> <span>Live TV</span></a>
            <a href="#"><i class="fas fa-film"></i> <span>On Demand</span></a>
            <a href="#"><i class="fas fa-compass"></i> <span>Discover</span></a>
        </nav>
        <div class="user-menu">
            <div class="search-box">
                <i class="fas fa-search"></i>
                <input type="text" placeholder="Search...">
            </div>
            <div class="user-profile">
                <i class="fas fa-user"></i>
            </div>
        </div>
    </header>

    <!-- Hero Section -->
    <section class="hero" id="hero">
        <div class="hero-content">
            <div class="hero-meta">
                <div class="hero-year"><i class="far fa-calendar-alt"></i> <span id="hero-year">2023</span></div>
                
                <div class="hero-category" id="hero-category">Action, Adventure</div>
            </div>
            <h1 class="hero-title" id="hero-title">Loading...</h1>
            <p class="hero-description" id="hero-description">Loading description...</p>
            <div class="hero-cast" id="hero-cast">Cast: Loading cast...</div>
            <div class="hero-buttons">
                <button class="btn btn-primary">
                    <i class="fas fa-play"></i> Play
                </button>
                <button class="btn btn-secondary">
                    <i class="fas fa-info-circle"></i> More Info
                </button>
            </div>
        </div>
    </section>

    <!-- Content Sections -->
    <main id="content-container">
        <!-- Sections loads -->
    </main>

    <!-- Modal -->
    <div class="modal" id="modal">
        <div class="modal-content">
            <button class="modal-close" id="modal-close">
                <i class="fas fa-times"></i>
            </button>
            <img src="/placeholder.svg" alt="" class="modal-poster" id="modal-poster">
            <div class="modal-details">
                <h2 class="modal-title" id="modal-title">Title</h2>
                <div class="modal-meta">
                    <span class="modal-rating" id="modal-rating">
                        <i class="fas fa-star"></i> 0.0
                    </span>
                    <span id="modal-year">2023</span>
                    <span id="modal-runtime">120 min</span>
                </div>
                <p class="modal-description" id="modal-description">Description</p>
                <div class="modal-genres" id="modal-genres">
                    <!-- Genres loads -->
                </div>
                
                <!-- Series specific content -->
                <div id="series-content" class="series-content" style="display: none;">
                    <div class="season-selector" id="season-selector">
                        <div class="season-dropdown" id="season-dropdown">
                            <span id="selected-season">Select Season</span>
                            <i class="fas fa-chevron-down"></i>
                        </div>
                        <div class="season-options" id="season-options">
                            <!-- Season laods -->
                        </div>
                    </div>
                    
                    <div class="episodes-container" id="episodes-container">
                        <!-- Episodes loadsa -->
                    </div>
                </div>
                
                <div class="modal-buttons" id="modal-buttons">
                    <button class="btn btn-primary">
                        <i class="fas fa-play"></i> Play
                    </button>
                    <button class="btn btn-secondary">
                        <i class="fas fa-plus"></i> My List
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Trailer Modal -->
    <div class="trailer-modal" id="trailerModal">
        <div class="trailer-modal-content">
            <span class="trailer-close" id="trailerClose">
                <i class="fas fa-times"></i>
            </span>
            <iframe class="trailer-iframe" id="trailerIframe" allowfullscreen></iframe>
        </div>
    </div>

    <script>
        // Global variables
        let genresMap = {};
        let featuredContent = null;
        let allMovies = [];
        let allSeries = [];

        // DOM Elements
        const heroSection = document.getElementById('hero');
        const heroTitle = document.getElementById('hero-title');
        const heroDescription = document.getElementById('hero-description');
        const heroYear = document.getElementById('hero-year');
        const heroDuration = document.getElementById('hero-duration');
        const heroCategory = document.getElementById('hero-category');
        const heroCast = document.getElementById('hero-cast');
        const contentContainer = document.getElementById('content-container');
        const modal = document.getElementById('modal');
        const modalClose = document.getElementById('modal-close');
        const modalTitle = document.getElementById('modal-title');
        const modalPoster = document.getElementById('modal-poster');
        const modalRating = document.getElementById('modal-rating');
        const modalYear = document.getElementById('modal-year');
        const modalRuntime = document.getElementById('modal-runtime');
        const modalDescription = document.getElementById('modal-description');
        const modalGenres = document.getElementById('modal-genres');
        const searchBox = document.querySelector('.search-box');
        const searchIcon = searchBox.querySelector('i');
        const searchInput = searchBox.querySelector('input');
        
        // Series elements
        const seriesContent = document.getElementById('series-content');
        const seasonSelector = document.getElementById('season-selector');
        const seasonDropdown = document.getElementById('season-dropdown');
        const selectedSeason = document.getElementById('selected-season');
        const seasonOptions = document.getElementById('season-options');
        const episodesContainer = document.getElementById('episodes-container');
        
        // Trailer elements
        const trailerModal = document.getElementById('trailerModal');
        const trailerClose = document.getElementById('trailerClose');
        const trailerIframe = document.getElementById('trailerIframe');

        let currentContent = null;

        document.addEventListener('DOMContentLoaded', () => {
            fetchGenres().then(() => {
                fetchContent();
            });

            setupEventListeners();
        });

        async function fetchGenres() {
            try {
                const response = await fetch('{{ serverip }}:{{ port }}/API/GET/GENRES');
                const data = await response.json();

                data.genres.forEach(genre => {
                    genresMap[genre.id] = genre.name;
                });
            } catch (error) {
                console.error('Error fetching genres:', error);
            }
        }

        async function fetchContent() {
            try {
                const response = await fetch('{{ serverip }}:{{ port }}/API/GET/MOVIELIST');
                const data = await response.json();

                allMovies = data.movies;
                allSeries = data.series;
                
                const allContent = [...allMovies, ...allSeries];
                if (allContent.length > 0) {
                    const randomIndex = Math.floor(Math.random() * allContent.length);
                    featuredContent = allContent[randomIndex];
                    updateHeroSection(featuredContent);
                    
                    const heroPlayBtn = document.querySelector('.hero-buttons .btn-primary');
                    heroPlayBtn.addEventListener('click', () => {
                        if (featuredContent.is_series) {

                            const firstSeason = Object.keys(featuredContent.seasons)[0];
                            const firstEpisode = featuredContent.seasons[firstSeason][0];
                            window.location.href = `/watch-series/${encodeURIComponent(featuredContent.url)}/${encodeURIComponent(firstSeason)}/${encodeURIComponent(firstEpisode)}`;
                        } else {
                            window.location.href = `/watch/${encodeURIComponent(featuredContent.url)}`;
                        }
                    });
                    

                    const heroInfoBtn = document.querySelector('.hero-buttons .btn-secondary');
                    heroInfoBtn.addEventListener('click', () => {
                        showModal(featuredContent);
                    });
                }
                

                createSection('Most Watchlisted This Week', data.movies.slice(0, 7));
                createSection('TV Series', data.series);
                

                if (data.movies.length > 5) {
                    createSection('Action & Adventure', 
                        data.movies.filter(movie => movie.genre_ids.includes(28) || movie.genre_ids.includes(12)));
                }
                
                if (data.series.length > 5) {
                    createSection('Documentaries', 
                        data.series.filter(series => series.genre_ids.includes(99)));
                }
                
                createMyServicesSection();
                
                setTimeout(() => {
                    document.querySelector('.loader').style.display = 'none';
                }, 800);
            } catch (error) {
                console.error('Error fetching content:', error);
                document.querySelector('.loader').style.display = 'none';
                contentContainer.innerHTML = '<p style="text-align: center; padding: 50px;">Error loading content. Please try again later.</p>';
            }
        }

        function createMyServicesSection() {
            const section = document.createElement('div');
            section.className = 'content-section';
            
            const sectionTitle = document.createElement('h2');
            sectionTitle.className = 'section-title';
            sectionTitle.innerHTML = `<i class="fas fa-cog"></i> My Services`;
            
            section.appendChild(sectionTitle);
            contentContainer.appendChild(section);
        }

        function updateHeroSection(content) {
            heroTitle.textContent = content.title;
            heroDescription.textContent = content.overview;
            
            heroYear.textContent = content.release_date ? content.release_date.split('-')[0] : 'N/A';

            if (content.genre_ids && content.genre_ids.length > 0) {
                const genres = content.genre_ids.map(id => genresMap[id] || '').filter(Boolean);
                heroCategory.textContent = genres.join(', ');
            } else {
                heroCategory.textContent = 'N/A';
            }

            if (content.cast) {
                heroCast.textContent = `Cast: ${content.cast}`;
            } else {
                heroCast.textContent = 'Cast: Information not available';
            }

            if (content.backdrop_path) {
                heroSection.style.backgroundImage = `url(https://image.tmdb.org/t/p/original${content.backdrop_path})`;
            }
        }

        function createSection(title, items) {
            if (items.length === 0) return;
            
            const section = document.createElement('div');
            section.className = 'content-section';
            
            const sectionTitle = document.createElement('h2');
            sectionTitle.className = 'section-title';
            sectionTitle.innerHTML = `<i class="fas fa-${title.includes('TV') ? 'tv' : 'film'}"></i> ${title}`;
            
            const row = document.createElement('div');
            row.className = 'content-row';
            
            items.forEach(item => {
                const card = createContentCard(item);
                row.appendChild(card);
            });
            
            section.appendChild(sectionTitle);
            section.appendChild(row);
            contentContainer.appendChild(section);
        }

        function createContentCard(item) {
            const card = document.createElement('div');
            card.className = 'content-card';
            
            if (featuredContent && item.id === featuredContent.id) {
                card.classList.add('active');
            }
            
            const img = document.createElement('img');
            img.src = item.poster_path ? `https://image.tmdb.org/t/p/original${item.poster_path}` : 'https://via.placeholder.com/200x300?text=No+Image';
            img.alt = item.title;
            img.loading = "lazy";
            
            if (item.is_series) {
                const badge = document.createElement('div');
                badge.className = 'series-badge';
                badge.innerHTML = `<i class="fas fa-tv"></i> Series`;
                card.appendChild(badge);
            }

            const overlay = document.createElement('div');
            overlay.className = 'card-overlay';
            
            const title = document.createElement('h3');
            title.className = 'card-title';
            title.textContent = item.title;
            
            const meta = document.createElement('div');
            meta.className = 'card-meta';
            
            const rating = document.createElement('span');
            rating.className = 'card-rating';
            rating.innerHTML = `<i class="fas fa-star"></i> ${item.vote_average.toFixed(1)}`;
            
            const year = document.createElement('span');
            year.textContent = item.release_date ? item.release_date.split('-')[0] : 'N/A';
            
            meta.appendChild(rating);
            meta.appendChild(year);

            const genres = document.createElement('div');
            genres.className = 'card-genres';
            
            if (item.genre_ids && item.genre_ids.length > 0) {
                item.genre_ids.slice(0, 3).forEach(genreId => {
                    if (genresMap[genreId]) {
                        const genreTag = document.createElement('span');
                        genreTag.className = 'genre-tag';
                        genreTag.textContent = genresMap[genreId];
                        genres.appendChild(genreTag);
                    }
                });
            }
            
            overlay.appendChild(title);
            overlay.appendChild(meta);
            overlay.appendChild(genres);
            
            card.appendChild(img);
            card.appendChild(overlay);

            card.addEventListener('click', () => showModal(item));
            
            return card;
        }

        function showModal(content) {

            currentContent = content;
            
            modalTitle.textContent = content.title;
            modalDescription.textContent = content.overview;
            modalRating.innerHTML = `<i class="fas fa-star"></i> ${content.vote_average.toFixed(1)}`;
            modalYear.textContent = content.release_date ? content.release_date.split('-')[0] : 'N/A';
            modalRuntime.textContent = content.runtime ? `${Math.floor(content.runtime / 60)}h ${content.runtime % 60}m` : 'N/A';
            
            if (content.backdrop_path) {
                modalPoster.src = `https://image.tmdb.org/t/p/original${content.backdrop_path}`;
            } else if (content.poster_path) {
                modalPoster.src = `https://image.tmdb.org/t/p/original${content.poster_path}`;
            } else {
                modalPoster.src = 'https://via.placeholder.com/1000x400?text=No+Image';
            }
            
            modalGenres.innerHTML = '';
            if (content.genre_ids && content.genre_ids.length > 0) {
                content.genre_ids.forEach(genreId => {
                    if (genresMap[genreId]) {
                        const genreTag = document.createElement('span');
                        genreTag.className = 'genre-tag';
                        genreTag.textContent = genresMap[genreId];
                        modalGenres.appendChild(genreTag);
                    }
                });
            }
            
            if (content.is_series) {
                seriesContent.style.display = 'block';
                populateSeasonSelector(content);
            } else {
                seriesContent.style.display = 'none';
            }

            updateModalButtons(content);

            modal.classList.add('active');
            document.body.style.overflow = 'hidden';
        }

        function updateModalButtons(content) {
            const modalButtons = document.getElementById('modal-buttons');
            modalButtons.innerHTML = '';

            const playBtn = document.createElement('button');
            playBtn.className = 'btn btn-primary';
            playBtn.innerHTML = '<i class="fas fa-play"></i> Play';
            playBtn.addEventListener('click', () => {
                if (content.is_series) {
                    let season = selectedSeason.getAttribute('data-season-id');
                    if (!season) {
                        season = Object.keys(content.seasons)[0];
                    }
                    const episode = content.seasons[season][0];
                    window.location.href = `/watch-series/${encodeURIComponent(content.url)}/${encodeURIComponent(season)}/${encodeURIComponent(episode)}`;
                } else {
                    window.location.href = `/watch/${encodeURIComponent(content.url)}`;
                }
            });
            
            if (content.trailer) {
                const trailerBtn = document.createElement('button');
                trailerBtn.className = 'btn btn-secondary';
                trailerBtn.innerHTML = '<i class="fas fa-film"></i> Trailer';
                trailerBtn.addEventListener('click', () => {
                    showTrailer(content.trailer);
                });
                modalButtons.appendChild(trailerBtn);
            }

            const listBtn = document.createElement('button');
            listBtn.className = 'btn btn-secondary';
            listBtn.innerHTML = '<i class="fas fa-plus"></i> My List';
            
            modalButtons.appendChild(playBtn);
            modalButtons.appendChild(listBtn);
        }

        function populateSeasonSelector(series) {
            if (!series.seasons || Object.keys(series.seasons).length === 0) {
                seriesContent.style.display = 'none';
                return;
            }

            seasonOptions.innerHTML = '';
            selectedSeason.textContent = 'Select Season';
            selectedSeason.removeAttribute('data-season-id');
            episodesContainer.innerHTML = '';

            Object.keys(series.seasons).forEach((seasonId, index) => {
                const option = document.createElement('div');
                option.className = 'season-option';
                option.textContent = `Season ${extractSeasonNumber(seasonId)}`;
                option.setAttribute('data-season-id', seasonId);
                
                option.addEventListener('click', () => {
                    selectedSeason.textContent = option.textContent;
                    selectedSeason.setAttribute('data-season-id', seasonId);

                    document.querySelectorAll('.season-option').forEach(opt => {
                        opt.classList.remove('selected');
                    });
                    option.classList.add('selected');

                    seasonSelector.classList.remove('active');

                    loadEpisodes(series, seasonId);
                });
                
                seasonOptions.appendChild(option);

                if (index === 0) {
                    option.click();
                }
            });
        }

        function extractSeasonNumber(seasonDir) {
            const match = seasonDir.match(/\d+/);
            return match ? match[0] : seasonDir;
        }

        function extractEpisodeNumber(episodeFile) {
            const match = episodeFile.match(/\d+/);
            return match ? match[0] : episodeFile.replace('.mp4', '');
        }

        function loadEpisodes(series, seasonId) {
            const episodes = series.seasons[seasonId];
            episodesContainer.innerHTML = '';
            
            episodes.forEach((episode, index) => {
                const episodeItem = document.createElement('div');
                episodeItem.className = 'episode-item';
                
                const episodeNum = extractEpisodeNumber(episode);
                
                const numberEl = document.createElement('div');
                numberEl.className = 'episode-number';
                numberEl.textContent = episodeNum;
                
                const detailsEl = document.createElement('div');
                detailsEl.className = 'episode-details';
                
                const titleEl = document.createElement('div');
                titleEl.className = 'episode-title';
                titleEl.textContent = `Episode ${episodeNum}`;
                
                const metaEl = document.createElement('div');
                metaEl.className = 'episode-meta';
                metaEl.textContent = `${Math.floor(Math.random() * 30 + 20)} min`;
                
                detailsEl.appendChild(titleEl);
                detailsEl.appendChild(metaEl);
                
                episodeItem.appendChild(numberEl);
                episodeItem.appendChild(detailsEl);

                episodeItem.addEventListener('click', () => {
                    window.location.href = `/watch-series/${encodeURIComponent(series.url)}/${encodeURIComponent(seasonId)}/${encodeURIComponent(episode)}`;
                });
                
                episodesContainer.appendChild(episodeItem);
            });
        }

        function showTrailer(trailerUrl) {
            let videoId = '';
            const regExp = /^.*(youtu.be\/|v\/|u\/\w\/|embed\/|watch\?v=|&v=)([^#&?]*).*/;
            const match = trailerUrl.match(regExp);
            
            if (match && match[2].length === 11) {
                videoId = match[2];
            }
            
            if (videoId) {
                const embedUrl = `https://www.youtube.com/embed/${videoId}?autoplay=1&rel=0&showinfo=0`;
                trailerIframe.src = embedUrl;
                trailerModal.classList.add('active');
                document.body.style.overflow = 'hidden';
            } else {
                alert('Trailer URL is not valid');
            }
        }
        
        function closeTrailerModal() {
            trailerModal.classList.remove('active');
            trailerIframe.src = '';
            document.body.style.overflow = 'auto';
        }

        function setupEventListeners() {
            modalClose.addEventListener('click', () => {
                modal.classList.remove('active');
                document.body.style.overflow = 'auto';
            });
            
            trailerClose.addEventListener('click', closeTrailerModal);

            trailerModal.addEventListener('click', (e) => {
                if (e.target === trailerModal) {
                    closeTrailerModal();
                }
            });
            
            seasonDropdown.addEventListener('click', () => {
                seasonSelector.classList.toggle('active');
                seasonDropdown.classList.toggle('active');
            });

            document.addEventListener('click', (e) => {
                if (!seasonSelector.contains(e.target)) {
                    seasonSelector.classList.remove('active');
                    seasonDropdown.classList.remove('active');
                }
            });

            searchIcon.addEventListener('click', () => {
                searchInput.focus();
            });

            window.addEventListener('scroll', () => {
                if (window.scrollY > 100) {
                    document.querySelector('header').classList.add('scrolled');
                } else {
                    document.querySelector('header').classList.remove('scrolled');
                }
            });

            searchInput.addEventListener('keyup', (e) => {
                if (e.key === 'Enter') {
                    performSearch(searchInput.value);
                }
            });
        }

        function performSearch(query) {
            if (query.trim() === '') return;
            
            const normalizedQuery = query.toLowerCase();
            const filteredMovies = allMovies.filter(
                movie => movie.title.toLowerCase().includes(normalizedQuery)
            );
            const filteredSeries = allSeries.filter(
                series => series.title.toLowerCase().includes(normalizedQuery)
            );

            contentContainer.innerHTML = '';
            
            if (filteredMovies.length === 0 && filteredSeries.length === 0) {
                contentContainer.innerHTML = 
                    `<div class="content-section">
                        <h2 class="section-title">
                            <i class="fas fa-search"></i> No results found for "${query}"
                        </h2>
                        <p style="padding: 20px 0;">Try different keywords or browse our categories.</p>
                    </div>`;
            } else {
                if (filteredMovies.length > 0) {
                    createSection(`Search Results: Movies (${filteredMovies.length})`, filteredMovies);
                }
                
                if (filteredSeries.length > 0) {
                    createSection(`Search Results: Series (${filteredSeries.length})`, filteredSeries);
                }
            }
            
            searchInput.value = '';
        }
    </script>
</body>
</html>